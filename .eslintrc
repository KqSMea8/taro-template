// https://cn.eslint.org/
{
  "extends": ["taro"],
  "parser": "babel-eslint",
  "plugins": [
    "react-hooks"
  ],
  "rules": {
    "no-unused-vars": [1, { "varsIgnorePattern": "Taro" }],
    "react/jsx-filename-extension": [1, { "extensions": [".js", ".jsx", ".tsx"] }],
    // ES6 规则
    // http://gitlab.alibaba-inc.com/specs/style-guide/issues/50#96
    "prefer-const": 0,
    "no-const-assign": 2,
    "no-class-assign": 2,
    "no-dupe-class-members": 2,
    "rest-spread-spacing": 2,
    "no-duplicate-imports": 2,
    "no-useless-rename": 2,
    "arrow-spacing": 2,
    "no-useless-computed-key": 2,
    "template-curly-spacing": 2,
    "generator-star-spacing": [1, {"before": false, "after": true}],
    "yield-star-spacing": [1, {"before": false, "after": true}],
    /**
     * 最佳实践
     */
    "strict": [0, "global"],
    "global-strict": [0, "always"], // deprecated rule, 忽略，采用上面规则限制
    "no-extra-strict": 0,
    "no-shadow": 1, // 局部变量和外层变量重名
    "no-undef": 2, // 未定义的变量
    "no-unused-expressions": 1, // 未使用的表达式
    "no-use-before-define": 0, // 允许定义前使用
    "yoda": 0,
    "eqeqeq": 0,
    "no-new": 0, // 允许 new 创建的对象没有被引用
    "consistent-return": 0, // 允许没有 return
    "dot-notation": [2, { // 操作对象属性时，优先使用 . 操作
      "allowKeywords": true
    }],
    "no-extend-native": 2, // 禁止通过 prototype 给原生对象增加额外方法。
    "no-native-reassign": 2, // 阻止复写内置类型
    "no-return-assign": 2, // 是否允许 return 返回表达式
    "no-constant-condition": [2, {
      "checkLoops": false
    }], // 提示拒绝使用已经明确意义的判断条件 if (true)
    "max-len": [
      1,
      200,
      2, {
        "ignoreComments": true,
        "ignoreUrls": true
      }
    ],

    "no-caller": 2,
    "no-loop-func": 1,

    // nodejs 环境规则
    "no-console": "warn", // 代码禁止出现 console
    "no-catch-shadow": 2, // try catch 捕获的变量名禁止重名定义
    "no-new-require": 0, // require 前面是否能添加 new
    "no-mixed-requires": [0, false], // 是否合并 var requires
    "no-path-concat": 0, // 是否可以自行拼接 path 还是必须要引用 path 模块
    "handle-callback-err": 0, // 代码里面是否有处理 err 的逻辑？

    /**
     * 代码风格
     */
    "no-empty": 0, // 允许空 block 语句
    "indent": [2, 2, { // 缩进
      "SwitchCase": 1
    }],
    "camelcase": [1, { // 驼峰，同时检查属性名
      "properties": "always"
    }],
    "quotes": [2, "single", "avoid-escape"], // 引号，强制使用单引号
    "brace-style": [2, "1tbs", {
      "allowSingleLine": false
    }],
    "comma-spacing": [2, { // 逗号空格
      "before": false,
      "after": true
    }],
    "comma-style": [2, "last"], // 逗号风格
    "eol-last": 0, // 最后留一行空行
    "func-names": 0, // 是否所有函数必须命名
    "new-cap": [1, { // 类名首字母大写
      "newIsCap": true,
      "properties": false,
      // "newIsCapExceptions": ["ctor"], // omi 里面 这个构造函数是小写开头的。
      "capIsNewExceptions": ["Page", "App", "Component"] // 小程序里部分方法是大写开头的。
    }],
    "key-spacing": [2, { // object 的 key value ：的前后空格
      "beforeColon": false,
      "afterColon": true
    }],
    "no-multi-spaces": 2, // 表达式中是否允许多个空格
    "no-multiple-empty-lines": 0, // 是否允许多行空格
    "no-nested-ternary": 0, // 是否禁止三目运算
    "no-new-object": 2, // 禁止 new Object()
    "no-spaced-func": 2, // 函数与括号的空格
    "no-trailing-spaces": 0, // 是否允许末尾有空格
    "no-extra-parens": [1, "functions"], // "no-wrap-func": 1, 禁止额外的括号 允许括号内是方法
    "no-underscore-dangle": 0, // 允许任意使用下划线
    "one-var": [1, "never"], // 定义变量一行一个
    "padded-blocks": [0, "never"], // 块代码上下不能留空行
    "semi": 2, // 校验分号
    "semi-spacing": 2, // 分号后面留空
    "keyword-spacing": 2, // 关键词后面加空格
    "space-before-blocks": 2, // 块级代码加空格
    "space-before-function-paren": [2, "never"], // 函数名与括弧之间空格
    "space-infix-ops": 2, // 操作符之间的空格
    "spaced-comment": [1, "always", {
      "line": {
        "markers": ["/"],
        "exceptions": ["-", "+"]
      },
      "block": {
        "markers": ["!"],
        "exceptions": ["*"],
        "balanced": true
      }
    }], // 注释斜线后面是否需要空格


    /**
     * React JSX 规范
     */
    "react-hooks/rules-of-hooks": "error", // 检查 Hook 的规则, 只在最顶层使用 Hook, 不要在循环，条件或嵌套函数中调用 Hook. 只在 React 函数中调用 Hook, 不要在普通的 JavaScript 函数中调用 Hook.
    "react-hooks/exhaustive-deps": "warn", // 检查 effect 的依赖
    "react/display-name": 0, // 是否显示 Component 名称
    "react/jsx-boolean-value": [0, "always"], // 传递布尔值时是否明确支持
    "jsx-quotes": [2, "prefer-double"], // jsx 属性值用双引号
    "react/no-access-state-in-setstate":2, // 阻止在this.setState中使用this.state， 使用 this.setState(prevState => ({value: prevState.value + 1}));
    "react/jsx-no-undef": 2, // 判断 jsx 是否已经定义
    "react/jsx-sort-props": 0, // 是否排序 props
    "react/jsx-sort-prop-types": 0, // 是否排序 prop types
    "react/jsx-uses-react": 2, // 组件中中是否用了 react
    "react/jsx-uses-vars": 1, // 定义了 jsx component 没有使用
    "react/no-direct-mutation-state": 2, // 禁止直接更改 state
    "react/no-did-mount-set-state": 0, // 不要在 componentDidMount 里面设置 state
    "react/no-will-update-set-state": [2, "disallow-in-func"], // 不要在 componentWillUpdate 里面设置 state
    "react/no-did-update-set-state": 1, // 同上
    "react/no-multi-comp": 1, // 一个文件里面禁止声明多个 component
    "react/prefer-es6-class": 1, // 使用ES6类
    "react/no-unknown-property": 2, // 检查 class、for 属性是否转义
    "react/prop-types": [1, {"ignore": []}], // 提醒设置 proptypes，需要忽略的name写入 ignore
    "react/react-in-jsx-scope": 0, // jsx 不强制引入 react
    "react/self-closing-comp": 2, // 检查是否有没有 children 的非子闭合标签
    "react/jsx-wrap-multilines": 1, // 不强制 return 的时候，结构的格式
    "react/jsx-key": 1, // 提醒使用key
    "react/no-array-index-key": 1, // 防止使用Array索引作为key，可能会一起异常
    "react/jsx-max-props-per-line": 2, // 防止在同一行里写入多个属性，可修复
    "react/jsx-no-duplicate-props": 2, // 防止重复的属性
    "react/jsx-one-expression-per-line": 2, // 每行一个表达式
    "react/jsx-props-no-multi-spaces": 1, // 属性不允许多个空格
    "react/jsx-space-before-closing": 1, // 闭合标签前空格，可修复
    "react/jsx-pascal-case": 1, // 自定义的JSX组件需要以驼峰命名 => https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-pascal-case.md
    "react/jsx-no-bind": 1, // 尽量减少使用箭头函数，因为每次渲染都会创建一个新的function，建议提前在构造函数中 bind(this)
    "react/sort-comp": [1, { //  属性的排序提醒 => https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/sort-comp.md
      "order": [
        "type-annotations",
        "static-methods",
        "instance-variables",
        "lifecycle",
        "everything-else",
        "instance-methods",
        "/^on.+$/", // 事件方法
        "/^render.+$/", // 局部渲染方法
        "render"
      ],
      "groups": {
        "lifecycle": [
          "displayName",
          "propTypes",
          "contextTypes",
          "childContextTypes",
          "mixins",
          "statics",
          "defaultProps",
          "constructor",
          "getDefaultProps",
          "state",
          "getInitialState",
          "getChildContext",
          "getDerivedStateFromProps",
          "componentWillReact", // mobx 特有
          "componentWillMount",
          "UNSAFE_componentWillMount",
          "componentDidMount",
          "componentWillReceiveProps",
          "UNSAFE_componentWillReceiveProps",
          "shouldComponentUpdate",
          "componentWillUpdate",
          "UNSAFE_componentWillUpdate",
          "getSnapshotBeforeUpdate",
          "componentDidUpdate",
          "componentDidCatch",
          "componentWillUnmount",
          "componentDidShow", // 小程序特有
          "componentDidHide", // 小程序特有
          "componentDidCatchError"
        ]
      }
    }]
  }
}
